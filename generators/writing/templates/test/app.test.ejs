<%- tplTsOnly(['/// <reference types="mocha"/>', '']) %>
<%- tplImports('assert', null, 'req') %>
<%- tplImports('rp', 'request-promise', 'req') %>
<%- tplImports('url', null, 'req') %>
<%- tplImports('app', `../${specs.app.src}/app`) %>

const port = app.get('port') || 3030<%- sc %>
const getUrl = <%- tplJsOrTs('pathname', '(pathname?: string)') %> => url.format({
  hostname: app.get('host') || 'localhost',
  protocol: 'http',
  port,
  pathname
})<%- sc %>

describe('Feathers application tests', () => {
  let server<%- sc %>

  before(function (done) {
    server = app.listen(port)<%- sc %>
    server.once('listening', () => done())<%- sc %>
  })<%- sc %>

  after(function (done) {
    server.close(done)<%- sc %>
  })<%- sc %>

  it('starts and shows the index page', () => {
    return rp(getUrl()).then(<%- tplJsOrTs('body', '(body: string)') %> =>
      assert.ok(body.indexOf('<html>') !== -1)
    )<%- sc %>
  })<%- sc %>

  describe('404', function () {
    it('shows a 404 HTML page', () => {
      return rp({
        url: getUrl('path/to/nowhere'),
        headers: {
          Accept: 'text/html'
        }
      }).catch(res => {
        assert.equal(res.statusCode, 404)<%- sc %>
        assert.ok(res.error.indexOf('<html>') !== -1)<%- sc %>
      })<%- sc %>
    })<%- sc %>

    it('shows a 404 JSON error without stack trace', () => {
      return rp({
        url: getUrl('path/to/nowhere'),
        json: true
      }).catch(res => {
        assert.equal(res.statusCode, 404)<%- sc %>
        assert.equal(res.error.code, 404)<%- sc %>
        assert.equal(res.error.message, 'Page not found')<%- sc %>
        assert.equal(res.error.name, 'NotFound')<%- sc %>
      })<%- sc %>
    })<%- sc %>
  })<%- sc %>
})<%- sc %>
